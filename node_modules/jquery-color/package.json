{
  "_args": [
    [
      {
        "raw": "jquery-color@^1.0.0",
        "scope": null,
        "escapedName": "jquery-color",
        "name": "jquery-color",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/Alice/libs/ReactJS_15.x/seed-project"
    ]
  ],
  "_cnpm_publish_time": 1332097986287,
  "_defaultsLoaded": true,
  "_engineSupported": true,
  "_from": "jquery-color@^1.0.0",
  "_hasShrinkwrap": false,
  "_id": "jquery-color@1.0.0",
  "_location": "/jquery-color",
  "_nodeVersion": "v0.6.12",
  "_npmUser": {
    "name": "znetstar",
    "email": "admin@znetstar.net"
  },
  "_npmVersion": "1.1.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jquery-color@^1.0.0",
    "scope": null,
    "escapedName": "jquery-color",
    "name": "jquery-color",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://r.cnpmjs.org/jquery-color/download/jquery-color-1.0.0.tgz",
  "_shasum": "003aba988a6f2d21d963d1f2eeeb6cdbc80471f1",
  "_shrinkwrap": null,
  "_spec": "jquery-color@^1.0.0",
  "_where": "/Users/Alice/libs/ReactJS_15.x/seed-project",
  "author": {
    "name": "jquery"
  },
  "bugs": {
    "url": "https://github.com/znetstar/jquery-color/issues"
  },
  "dependencies": {
    "jQuery": "latest"
  },
  "description": "A jQuery plugin that adds color animation support.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "tarball": "http://r.cnpmjs.org/jquery-color/download/jquery-color-1.0.0.tgz",
    "shasum": "003aba988a6f2d21d963d1f2eeeb6cdbc80471f1",
    "size": 81235,
    "noattachment": false
  },
  "ender": "./require.js",
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/znetstar/jquery-color#readme",
  "main": "./require.js",
  "maintainers": [
    {
      "name": "gnarf",
      "email": "gnarf37@gmail.com"
    },
    {
      "name": "leobalter",
      "email": "leonardo.balter@gmail.com"
    },
    {
      "name": "mgol",
      "email": "m.goleb@gmail.com"
    }
  ],
  "name": "jquery-color",
  "optionalDependencies": {},
  "publish_time": 1332097986287,
  "readme": "#jQuery.Color()\nCheck out [Color Library on jQuery UI Planning Wiki](http://wiki.jqueryui.com/w/page/12137744/Color-Library) for more information about the new API in this branch\n\n##Animated colors\n\nThe main purpose of this plugin to animate color properties on elements using jQuery's [`.animate()`](http://api.jquery.com/animate)\n\nSupported Properties\n-------\n`backgroundColor`, `borderBottomColor`, `borderLeftColor`, `borderRightColor`, `borderTopColor`, `color`, `outlineColor`\n\nExample Use\n-------\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <style>\n    div {\n    background-color:#bada55;\n    width:100px;\n    border:1px solid green;\n    }\n    </style>\n    <script src=\"http://code.jquery.com/jquery-1.6.1.min.js\"></script>\n    <script src=\"jquery.color.min.js\"></script>\n    </head>\n    <body>\n    <button id=\"go\">Simple</button>\n    <button id=\"sat\">Desaturate</button>\n      <div id=\"block\">Hello!</div>\n    <script>\n    $(\"#go\").click(function(){\n      $(\"#block\").animate({\n          backgroundColor: \"#abcdef\"\n      }, 1500 );\n    });\n    $(\"#sat\").click(function(){\n      $(\"#block\").animate({\n          backgroundColor: $.Color({ saturation: 0 })\n      }, 1500 );\n    });\n    </script>\n    </body>\n    </html>\n\n\n##The $.Color Function Object\nThe `$.Color()` function allows you to create and manipulate color objects that are accepted by jQuery's `.animate()` and `.css()` functions via supplied cssHooks.\n\n* Returns a new Color object, similar to `$()` or `$.Event`\n* Accepts many formats to create a new Color object with a `$.Color.fn` prototype\n\n###Example uses:\n\n    // Parsing String Colors:\n    jQuery.Color( \"#abcdef\" );\n    jQuery.Color( \"rgb(100,200,255)\" );\n    jQuery.Color( \"rgba(100,200,255,0.5)\" );\n    jQuery.Color( \"aqua\" );\n\n    // Creating Color Objects in Code:\n    // use null or undefined for values you wish to leave out\n    jQuery.Color( red, green, blue, alpha );\n    jQuery.Color([ red, green, blue, alpha ]);\n    jQuery.Color({ red: red, green: green, blue: blue, alpha: alpha });\n    jQuery.Color({ hue: hue, saturation: saturation, lightness: lightness, alpha: alpha });\n\n    // Helper to get value from CSS\n    jQuery.Color( element, cssProperty );\n\n##jQuery.Color.fn / prototype / the Color Object methods\n\n###Getters / Setters:\n\n    red()             // returns the \"red\" component of the color ( Integer from 0 - 255 )\n    red( val )        // returns a copy of the color object with the red set to val\n    green()           // returns the \"green\" component of the color from ( Integer from 0 - 255 )\n    green( val )      // returns a copy of the color object with the green set to val\n    blue()            // returns the \"blue\" component of the color from ( Integer from 0 - 255 )\n    blue( val )       // returns a copy of the color object with the blue set to val\n    alpha()           // returns the \"alpha\" component of the color from ( Float from 0.0 - 1.0 )\n    alpha( val )      // returns a copy of the color object with the alpha set to val\n    hue()             // returns the \"hue\" component of the color ( Integer from 0 - 359 )\n    hue( val )        // returns a copy of the color objec with the hue set to val\n    saturation()      // returns the \"hue\" component of the color ( Float from 0.0 - 1.0 )\n    saturation( val ) // returns a copy of the color objec with the hue set to val\n    lightness()       // returns the \"hue\" component of the color ( Float from 0.0 - 1.0 )\n    lightness( val )  // returns a copy of the color objec with the hue set to val\n    // all of the above values can also take strings in the format of \"+=100\" or \"-=100\"\n\n    rgba() // returns a rgba \"tuple\" [ red, green, blue, alpha ]\n    // rgba() setters: returns a copy of the color with any defined values set to the new value\n    rgba( red, green, blue, alpha )\n    rgba({ red: red, green: green, blue: blue, alpha: alpha })\n    rgba([ red, green, blue, alpha ])\n\n    hsla() // returns a HSL tuple [ hue, saturation, lightness, alpha ]\n    // much like the rgb setter - returns a copy with any defined values set\n    hsla( hue, saturation, lightness, alpha ) \n    hsla({ hue: hue, saturation: saturation, lightness: lightness, alpha: alpha ) \n    hsla([ hue, saturation, lightness, alpha ]) \n    \n\n###String Methods:\n    toRgbString() // returns a css string \"rgba(255, 255, 255, 1)\"\n    toHslString() // returns a css string \"hsla(330, 75%, 25%, 1)\"\n    toHexString( includeAlpha ) // returns a css string \"#abcdef\", with \"includeAlpha\" uses \"#rrggbbaa\" (alpha *= 255)\n\n###Working with other colors:\n    transition( othercolor, distance ) // the color distance ( 0.0 - 1.0 ) of the way between this color and othercolor\n    blend( othercolor ) // Will apply this color on top of the other color using alpha blending\n    is( othercolor ) // Will determine if this color is equal to all defined properties of othercolor\n\n##jQuery.Color properties\n\n\n##Internals on The Color Object\n* Internally, RGBA values are stored as `color._rgba[0] = red, color._rgba[1] = green, color._rgba[2] = blue, color._rgba[3] = alpha`.  However, please remember there are nice convenient setters and getters for each of these properties.\n* `undefined`/`null` values for colors indicate non-existence. This signals the `transition()` function to keep whatever value was set in the other end of the transition. For example, animating to `$.Color([ 255, null, null, 1 ])` would only animate the red and alpha values of the color.\n\n###`jQuery.Color.names`\nA list of named colors is stored on the `$.Color.names` object.  The value they contain should be parseable by `$.Color()`. All names on this object should be lowercased.  I.E. `$.Color(\"Red\")` is the same as doing `$.Color( $.Color.names[\"red\"] );`\n\nThere is also a named color `\"_default\"` which by default is white, this is used for situations where a color is unparseable.\n\n###`\"transparent\"`\nA special note about the color `\"transparent\"` - It returns `null` for red green and blue unless you specify colors for these values.\n\n    $.Color(\"#abcdef\").transition(\"transparent\", 0.5)\n\nAnimating to or from the value `\"transparent\"` will still use \"#abcdef\" for red green and blue.\n\n##HSLA Support\n\nIf a color is created using any of the HSLA functions or parsers, it will keep the `_rgba` array up to date as well as having a `_hsla` array.  Once an RGBA operation is performed on HSLA, however, the `_hsla` cache is removed and all operations will continue based off of rgb (unless you go back into HSLA). The `._hsla` array follows the same format as `._rbga`, `[hue, saturation, lightness, alpha ]`.  If you need to build an HSLA color from an HSLA array, `$.Color().hsla( array )` works for that purpose.\n\n**Colors with 0 saturation, or 100%/0% lightness will be stored with a hue of 0**\n\n##Extensibility\n\nIt is possible for you to add your own functions to the color object.  For instance, this function will tell you if its better to use black or white on a given background color.\n\n    // method taken from https://gist.github.com/960189\n    $.Color.fn.contrastColor = function() {\n        var r = this._rgba[0], g = this._rgba[1], b = this._rgba[2];\n        return (((r*299)+(g*587)+(b*144))/1000) >= 131.5 ? \"black\" : \"white\";\n    };\n    \n    // usage examples:\n    $.Color(\"#bada55\").contrastColor(); // \"black\"\n    element.css( \"color\", $.Color( element, \"backgroundColor\" ).contrastColor() );\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/znetstar/jquery-color.git"
  },
  "version": "1.0.0"
}
